"""Unit tests for the termination.pools module."""

import pytest

from termination.pools import VariablePool, fresh_variable
from termination.terms import IndexedVariable, Variable


class TestPool:
    """Test case for the VariblePool class."""

    @pytest.mark.parametrize(
        ("name",),
        [pytest.param("x"), pytest.param("y")],
    )
    def test_get_variable(self, name):
        """A VariablePool can get variables."""
        pool = VariablePool()
        variable = pool.get(name)
        assert isinstance(variable, Variable)
        assert variable.name == name

    @pytest.mark.parametrize(
        ("name", "index"),
        [
            pytest.param("x", 1),
            pytest.param("x", 2),
            pytest.param("y", 1),
            pytest.param("y", 2),
        ],
    )
    def test_get_indexed_variable(self, name, index):
        """A VariablePool can get variables."""
        pool = VariablePool()
        variable = pool.get(name, index)
        assert isinstance(variable, IndexedVariable)
        assert variable.name == name
        assert variable.index == index

    @pytest.mark.parametrize(
        ("name",),
        [pytest.param("x"), pytest.param("y")],
    )
    def test_getitem(self, name):
        """A VariablePool can get variables using bracket ['x'] notation."""
        pool = VariablePool()
        variable = pool[name]
        assert isinstance(variable, Variable)
        assert variable.name == name

    @pytest.mark.parametrize(
        ("name",),
        [pytest.param("x"), pytest.param("y")],
    )
    def test_getitem_singleton(self, name):
        """A VariablePool returns the same variable instance."""
        pool = VariablePool()
        variable1 = pool[name]
        variable2 = pool[name]
        assert variable1 is variable2

    @pytest.mark.parametrize(
        ("name",),
        [pytest.param("x"), pytest.param("y")],
    )
    def test_fresh(self, name):
        """A VariablePool can generate "fresh" variables.

        Fresh variables have a unique index from any other index of a variable
        with the same name returned from that VariablePool.
        """
        pool = VariablePool()
        variable1 = pool.get_fresh(name)
        variable2 = pool.get_fresh(name)

        assert isinstance(variable1, IndexedVariable)
        assert variable1.name == name
        assert variable1.index == 1

        assert isinstance(variable2, IndexedVariable)
        assert variable2.name == name
        assert variable2.index == 2

    @pytest.mark.parametrize(
        ("name",),
        [pytest.param("x"), pytest.param("y")],
    )
    def test_independent_pools(self, name):
        """Different VariablePools have independent fresh indices."""
        pool1 = VariablePool()
        pool2 = VariablePool()

        variable1_pool1 = pool1.get_fresh(name)
        variable1_pool2 = pool2.get_fresh(name)
        variable2_pool1 = pool1.get_fresh(name)
        variable2_pool2 = pool2.get_fresh(name)

        assert variable1_pool1.index == 1
        assert variable1_pool2.index == 1
        assert variable2_pool1.index == 2
        assert variable2_pool2.index == 2


class TestFreshVariable:
    """Test case for the fresh_variabe function."""

    def test_fresh_variable(self):
        """The fresh_variable function works on variables from a pool."""
        pool = VariablePool()
        x = pool["x"]

        x1 = fresh_variable(x)
        x2 = fresh_variable(x)

        assert isinstance(x1, IndexedVariable)
        assert x1.name == "x"
        assert x1.index == 1

        assert isinstance(x2, IndexedVariable)
        assert x2.name == "x"
        assert x2.index == 2

    def test_indexed_variable(self):
        """The fresh_variable function works on indexed variables from a pool."""
        pool = VariablePool()
        x = pool["x"]

        x1 = fresh_variable(x)
        x2 = fresh_variable(x1)

        assert isinstance(x1, IndexedVariable)
        assert x1.name == "x"
        assert x1.index == 1

        assert isinstance(x2, IndexedVariable)
        assert x2.name == "x"
        assert x2.index == 2

    def test_fresh_pool(self):
        """The fresh_variable function works on a VariablePool."""
        pool = VariablePool()

        v1 = fresh_variable(pool)
        v2 = fresh_variable(pool)

        assert isinstance(v1, IndexedVariable)
        assert v1.name == ""
        assert v1.index == 1

        assert isinstance(v2, IndexedVariable)
        assert v2.name == ""
        assert v2.index == 2

    @pytest.mark.parametrize(
        ("target",),
        [
            pytest.param(Variable("x")),
            pytest.param(IndexedVariable("y", 1)),
            pytest.param(27),
        ],
    )
    def test_fresh_throws(self, target):
        """The fresh_variable function throws for non-pool objects.

        For variables that were not generated by a VariablePool, and for other
        random objects, fresh_variable should raise a ValueError.
        """
        with pytest.raises(ValueError):
            fresh_variable(target)

    def test_fresh_shares_index(self):
        """The fresh_variable function uses the same fresh index as get_fresh."""
        pool = VariablePool()
        x = pool["x"]

        x1 = fresh_variable(x)
        x2 = pool.get_fresh("x")
        x3 = fresh_variable(x)

        assert x1.index == 1
        assert x2.index == 2
        assert x3.index == 3
